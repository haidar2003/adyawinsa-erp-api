generator client {
  provider      = "prisma-client-js"
  output        = "./generated/"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model inventory_move_draft {
  org_id             Int
  creation_date_time DateTime @db.Timestamptz(6)
  movement_id        Int      @unique
  data               Json     @db.Json
  
  production_single_scrap_imove production_single_product_draft? @relation("PRODUCT-SINGLE-SCRAP-IMOVE")
  production_single_repair_imove production_single_product_draft? @relation("PRODUCT-SINGLE-REPAIR-IMOVE")
  quality_check_scrap_imove quality_check? @relation("QUALITY-SCRAP-IMOVE")
  
  // quality_check_repair_imove quality_check? @relation("QUALITY-REPAIR-TRACKID")

  @@id([org_id, creation_date_time])
}

model shipment_draft {
  org_id             Int
  creation_date_time DateTime @db.Timestamptz(6)
  erp_id        Int      @unique
  vendor_id          Int @default(-1)
  data               Json     @db.Json

  @@id([org_id, creation_date_time])
}

model material_receive_draft {
  org_id             Int
  creation_date_time DateTime @db.Timestamptz(6)
  erp_id        Int      @unique
  vendor_id          Int @default(-1)
  data               Json     @db.Json

  @@id([org_id, creation_date_time])
}

model production_single_product_draft {
  org_id             Int
  creation_date_time DateTime @db.Timestamptz(6)
  erp_id        Int      @unique
  data               Json     @db.Json

  track_id_object   track_id_object @relation("PRODUCT-SINGLE-RESULT-TRACKID", fields: [track_id], references: [track_id])
  track_id          String @unique

  total_ok          Float

  scrap_reason      String @default("")
  total_ng_scrap    Float
  imove_scrap_obj   inventory_move_draft? @relation("PRODUCT-SINGLE-SCRAP-IMOVE", fields: [imove_scrap_id], references: [movement_id])
  imove_scrap_id    Int? @unique

  repair_reason     String @default("")
  total_ng_repair   Float
  repair_track_id_obj   track_id_object? @relation("PRODUCT-SINGLE-REPAIR-TRACKID", fields: [repair_track_id], references: [track_id])
  repair_track_id   String? @unique
  imove_repair_obj  inventory_move_draft? @relation("PRODUCT-SINGLE-REPAIR-IMOVE", fields: [imove_repair_id], references: [movement_id])
  imove_repair_id   Int? @unique

  @@id([org_id, creation_date_time])
}

model repair_job {
  org_id            Int
  creation_date_time DateTime @db.Timestamptz(6)

  track_id_object   track_id_object @relation("REPAIR-TRACK-ID",fields: [track_id], references: [track_id])
  track_id          String @unique

  quality_check     quality_check[] @relation("QUALITY-REPAIR-JOB")

  repair_status     String

  @@id([org_id, creation_date_time])
}

model quality_check {
  org_id            Int
  creation_date_time DateTime @db.Timestamptz(6)
  locator_id        Int @default(-1)

  track_id_object   track_id_object @relation("QUALITY-RESULT-TRACKID", fields: [track_id], references: [track_id])
  track_id          String

  checker_name      String
  customer          String

  total_ok          Float

  scrap_reason      String @default("")
  total_ng_scrap    Float
  imove_scrap_obj   inventory_move_draft? @relation("QUALITY-SCRAP-IMOVE", fields: [imove_scrap_id], references: [movement_id])
  imove_scrap_id    Int? @unique

  repair_reason     String @default("")
  total_ng_repair   Float
  repair_job        repair_job? @relation("QUALITY-REPAIR-JOB", fields: [repair_job_id], references: [track_id])
  repair_job_id     String?

  // repair_track_id_object   track_id_object? @relation("QUALITY-REPAIR-TRACKID", fields: [repair_track_id], references: [track_id])
  // repair_track_id   String? @unique

  @@id([org_id, creation_date_time])
}

model track_id_object {
  track_id                String @id
  productId               Int @default(-1)
  productName             String @default("")
  track_type              String
  creation_date_time      DateTime @unique(sort: Desc) @default(now())
  source_data             Json     @db.Json
  object_data             Json     @db.Json
  track_id_history        track_id_history[]

  repair_job              repair_job? @relation("REPAIR-TRACK-ID")

  quality_check           quality_check[] @relation("QUALITY-RESULT-TRACKID")

  // quality_check_repair_source quality_check? @relation("QUALITY-REPAIR-TRACKID")

  product_single_result   production_single_product_draft? @relation("PRODUCT-SINGLE-RESULT-TRACKID")
  product_single_repair   production_single_product_draft? @relation("PRODUCT-SINGLE-REPAIR-TRACKID")
}

model track_id_history {
  track_id_object           track_id_object @relation(fields: [track_id], references: [track_id])
  track_id                  String
  update_date_time          DateTime @unique(sort: Desc) @default(now())
  description               String @default("")
  data                      Json     @db.Json

  @@id([track_id, update_date_time])
}

model track_id_stock {
  locator_id                  String
  key23                       String
  product_id                  String
  track_id                    String // This is a simple string, we don't make relations for this to speed up the db operations.
  quantity                    Float
  data                        Json     @db.Json

  @@id([locator_id, key23])
}